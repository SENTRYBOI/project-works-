'use client'

import { useState, useMemo } from 'react'
import { Input } from "@/components/ui/input"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Button } from "@/components/ui/button"
import { ArrowUpDown, Plus } from "lucide-react"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import { Label } from "@/components/ui/label"

const initialBooks = [
  { id: 1, title: "To Kill a Mockingbird", author: "Harper Lee", year: 1960, genre: "Fiction" },
  { id: 2, title: "1984", author: "George Orwell", year: 1949, genre: "Science Fiction" },
  { id: 3, title: "Pride and Prejudice", author: "Jane Austen", year: 1813, genre: "Romance" },
  { id: 4, title: "The Great Gatsby", author: "F. Scott Fitzgerald", year: 1925, genre: "Fiction" },
  { id: 5, title: "Moby-Dick", author: "Herman Melville", year: 1851, genre: "Adventure" },
  { id: 6, title: "The Catcher in the Rye", author: "J.D. Salinger", year: 1951, genre: "Fiction" },
  { id: 7, title: "Jane Eyre", author: "Charlotte BrontÃ«", year: 1847, genre: "Romance" },
  { id: 8, title: "The Hobbit", author: "J.R.R. Tolkien", year: 1937, genre: "Fantasy" },
]

export default function BookStore() {
  const [books, setBooks] = useState(initialBooks)
  const [searchTerm, setSearchTerm] = useState('')
  const [sortColumn, setSortColumn] = useState('title')
  const [sortOrder, setSortOrder] = useState('asc')
  const [selectedGenre, setSelectedGenre] = useState('All')
  const [newBook, setNewBook] = useState({ title: '', author: '', year: '', genre: '' })
  const [isDialogOpen, setIsDialogOpen] = useState(false)

  const filteredBooks = useMemo(() => {
    return books
      .filter(book => 
        (book.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
        book.author.toLowerCase().includes(searchTerm.toLowerCase())) &&
        (selectedGenre === 'All' || book.genre === selectedGenre)
      )
      .sort((a, b) => {
        if (a[sortColumn] < b[sortColumn]) return sortOrder === 'asc' ? -1 : 1
        if (a[sortColumn] > b[sortColumn]) return sortOrder === 'asc' ? 1 : -1
        return 0
      })
  }, [books, searchTerm, sortColumn, sortOrder, selectedGenre])

  const handleSort = (column) => {
    if (column === sortColumn) {
      setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc')
    } else {
      setSortColumn(column)
      setSortOrder('asc')
    }
  }

  const genres = ['All', ...new Set(books.map(book => book.genre))]

  const handleAddBook = (e) => {
    e.preventDefault()
    const id = books.length > 0 ? Math.max(...books.map(book => book.id)) + 1 : 1
    setBooks([...books, { ...newBook, id, year: parseInt(newBook.year) }])
    setNewBook({ title: '', author: '', year: '', genre: '' })
    setIsDialogOpen(false)
  }

  return (
    <div className="container mx-auto p-4 space-y-6">
      <Card>
        <CardHeader className="flex flex-row items-center justify-between">
          <CardTitle className="text-2xl font-bold">Book Store</CardTitle>
          <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
            <DialogTrigger asChild>
              <Button variant="outline" size="icon">
                <Plus className="h-4 w-4" />
              </Button>
            </DialogTrigger>
            <DialogContent>
              <DialogHeader>
                <DialogTitle>Add New Book</DialogTitle>
              </DialogHeader>
              <form onSubmit={handleAddBook} className="space-y-4">
                <div>
                  <Label htmlFor="title">Title</Label>
                  <Input
                    id="title"
                    value={newBook.title}
                    onChange={(e) => setNewBook({ ...newBook, title: e.target.value })}
                    required
                  />
                </div>
                <div>
                  <Label htmlFor="author">Author</Label>
                  <Input
                    id="author"
                    value={newBook.author}
                    onChange={(e) => setNewBook({ ...newBook, author: e.target.value })}
                    required
                  />
                </div>
                <div>
                  <Label htmlFor="year">Year</Label>
                  <Input
                    id="year"
                    type="number"
                    value={newBook.year}
                    onChange={(e) => setNewBook({ ...newBook, year: e.target.value })}
                    required
                  />
                </div>
                <div>
                  <Label htmlFor="genre">Genre</Label>
                  <Input
                    id="genre"
                    value={newBook.genre}
                    onChange={(e) => setNewBook({ ...newBook, genre: e.target.value })}
                    required
                  />
                </div>
                <Button type="submit">Add Book</Button>
              </form>
            </DialogContent>
          </Dialog>
        </CardHeader>
        <CardContent className="space-y-4">
          <Input
            type="text"
            placeholder="Search by title or author"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
          <div className="flex flex-col sm:flex-row gap-4">
            <Select value={selectedGenre} onValueChange={setSelectedGenre}>
              <SelectTrigger className="w-full sm:w-[180px]">
                <SelectValue placeholder="Select Genre" />
              </SelectTrigger>
              <SelectContent>
                {genres.map(genre => (
                  <SelectItem key={genre} value={genre}>{genre}</SelectItem>
                ))}
              </SelectContent>
            </Select>
            <div className="flex gap-2">
              <Button
                variant="outline"
                size="sm"
                onClick={() => handleSort('title')}
                className="flex-1 sm:flex-none"
              >
                Title
                <ArrowUpDown className="ml-2 h-4 w-4" />
              </Button>
              <Button
                variant="outline"
                size="sm"
                onClick={() => handleSort('author')}
                className="flex-1 sm:flex-none"
              >
                Author
                <ArrowUpDown className="ml-2 h-4 w-4" />
              </Button>
              <Button
                variant="outline"
                size="sm"
                onClick={() => handleSort('year')}
                className="flex-1 sm:flex-none"
              >
                Year
                <ArrowUpDown className="ml-2 h-4 w-4" />
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {filteredBooks.map((book) => (
          <Card key={book.id} className="flex flex-col justify-between">
            <CardHeader>
              <CardTitle>{book.title}</CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-sm text-muted-foreground">Author: {book.author}</p>
              <p className="text-sm text-muted-foreground">Year: {book.year}</p>
              <p className="text-sm text-muted-foreground">Genre: {book.genre}</p>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  )
}